; generated by coffee-basic/0.0.2

if (A_IsAdmin != true) {
  Run *RunAs "%A_ScriptFullPath%"
  ExitApp
}

#KeyHistory 0
#MaxThreads 20
#NoEnv
#Persistent
#SingleInstance Force
#UseHook

CoordMode Mouse, Client
CoordMode Pixel, Client
CoordMode ToolTip, Client
SendMode Event
SetBatchLines 100ms
SetKeyDelay 0, 50
SetMouseDelay 0, 50

; global variable

global $cd := {}
global $ts := {}
global $mp := 0
global $isChanting := false
global $isMoving := false
global hasTarget := false
global $level := 80
global $skill := {}
global $watcher := {}
global $distance := "far"
global $step := 0
global $isReporting := true
global $ap := 0

; function

toggleView() {
  GetKeyState __value__, 2joy5
  isPressing := __value__ == "D"
  if !(isPressing) {
    SetTimer toggleView, Off
    Send {ctrl up}{up up}
    return
  }
  GetKeyState state, 2joyr
  if (state < 20) {
    Send {ctrl down}{up down}
  }
}

attack() {
  group := getGroup()
  if !(group) {
    return
  }
  use("获取状态")
  use("报告")
  if !(use("索敌")) {
    return
  }
  if (group == "right") {
    attackS()
    return
  }
  if (group == "both") {
    attackM()
    return
  }
}

bindAttack() {
  GetKeyState __value__, 2joy4
  isPressing := __value__ == "D"
  if !(isPressing) {
    SetTimer bindAttack, Off
    return
  }
  attack()
}

calcCD(name) {
  result := $cd[name] - (A_TickCount - $ts[name])
  if !(result > 0) {
    return 0
  }
  result := Round(result / 1000)
  return result
}

clearTip() {
  ToolTip
}

clearWatcher(name, type := "used") {
  if (type == "used") {
    if !(isUsed(name)) {
      return
    }
  }
  else if (type == "status") {
    if !(hasStatus(name)) {
      return
    }
  }
  if !($watcher[name]) {
    MsgBox % "invalid watcher: " . name . ""
    return
  }
  __timer__ := $watcher[name]
  SetTimer %__timer__%, Off
  $ts[name] := A_TickCount - $cd.技能施放补正
  return true
}

getGroup() {
  GetKeyState __value__, 2joy7
  isLT := __value__ == "D"
  GetKeyState __value__, 2joy8
  isRT := __value__ == "D"
  if (isLT and isRT) {
    return "both"
  }
  if (isLT) {
    return "left"
  }
  if (isRT) {
    return "right"
  }
  return
}

getMp() {
  PixelSearch x, y, 181, 36, 328, 36, 0x58483E, 10, Fast RGB
  if !(x) {
    return 100
  }
  percent := (x - 181) * 100 / (328 - 181)
  percent := Floor(percent)
  return percent
}

hasStatus(name) {
  ImageSearch x, y, 725, 840, 925, 875, % A_ScriptDir . "\" . "image\" . name . ".png"
  if (x > 0 and y > 0) {
    return true
  }
  return false
}

hasStatusTarget(name) {
  ImageSearch x, y, 725, 765, 925, 800, % A_ScriptDir . "\" . "image\" . name . ".png"
  if (x > 0 and y > 0) {
    return true
  }
  return false
}

isUsed(name) {
  ImageSearch x, y, 60, 915, 225, 975, % A_ScriptDir . "\" . "image\" . name . ".png"
  if (x > 0 and y > 0) {
    return true
  }
  return false
}

isChanting() {
  if ($isMoving) {
    return false
  }
  PixelGetColor color, 1130, 865, RGB
  return color == 0x2B1B13
}

isMoving() {
  GetKeyState dis, 2joyx
  if (dis < 40) {
    return true
  }
  if (dis > 60) {
    return true
  }
  GetKeyState dis, 2joyy
  if (dis < 40) {
    return true
  }
  if (dis > 60) {
    return true
  }
  return false
}

isTargeting() {
  PixelGetColor color, 650, 65, RGB
  if (color == 0xFF8888) {
    return true
  }
  if (color == 0xFFC888) {
    return true
  }
  if (color == 0xEBD788) {
    return true
  }
  if (color == 0xFFB1FF) {
    return true
  }
  return false
}

makeReportMsg(msg, name) {
  result := calcCD(name)
  if !(result > 1) {
    return msg
  }
  return "" . msg . "`n" . name . "：" . result . "s"
}

resetKey() {
  Send {alt up}
  Send {ctrl up}
  Send {shift up}
}

resetTs() {
  for key, value in ts {
    $ts[key] := 0
  }
}

setLevel() {
  InputBox $level, , % "input level", , , , , , , , % $level
  if !($level > 0) {
    $level := 80
  }
  if ($level < 10) {
    $level := $level * 10
  }
}

use(name, option := false) {
  if !($skill[name]) {
    MsgBox % "invalid skill: " . name . ""
    return
  }
  return $skill[name].Call(option)
}

watch(name) {
  if !($watcher[name]) {
    MsgBox % "invalid watcher: " . name . ""
    return
  }
  return $watcher[name]()
}

getDistance() {
  if !(hasTarget) {
    return "far"
  }
  PixelGetColor color, 1479, 682, RGB
  if (color == 0xD23A3A) {
    return "far"
  }
  return "near"
}

resetStep() {
  $step := 0
}

__$skill_dot_先锋剑__() {
  if !(A_TickCount - $ts.先锋剑 > $cd.先锋剑) {
    return
  }
  if !($step == 0) {
    return
  }
  if !($distance == "near") {
    return
  }
  Send {alt down}{1}{alt up}
  SetTimer __$watcher_dot_先锋剑__, % $cd.技能施放判断间隔
  return true
}

__$watcher_dot_先锋剑__() {
  if !(clearWatcher("先锋剑")) {
    return
  }
  $step := 1
  SetTimer resetStep, Off
  SetTimer resetStep, % 0 - 15000
}

__$skill_dot_战逃反应__() {
  if !(A_TickCount - $ts.战逃反应 > $cd.战逃反应) {
    return
  }
  Send {alt down}{2}{alt up}
  SetTimer __$watcher_dot_战逃反应__, % $cd.技能施放判断间隔
  return true
}

__$watcher_dot_战逃反应__() {
  clearWatcher("战逃反应", "status")
}

__$skill_dot_暴乱剑__() {
  if !(A_TickCount - $ts.暴乱剑 > $cd.暴乱剑) {
    return
  }
  if !($step == 1) {
    return
  }
  if !($distance == "near") {
    return
  }
  Send {alt down}{3}{alt up}
  SetTimer __$watcher_dot_暴乱剑__, % $cd.技能施放判断间隔
  return true
}

__$watcher_dot_暴乱剑__() {
  if !(clearWatcher("暴乱剑")) {
    return
  }
  if !($level >= 26) {
    $step := 0
    return
  }
  $step := 2
  SetTimer resetStep, Off
  SetTimer resetStep, % 0 - 15000
}

__$skill_dot_全蚀斩__() {
  if !(A_TickCount - $ts.全蚀斩 > $cd.全蚀斩) {
    return
  }
  Send {alt down}{4}{alt up}
  SetTimer __$watcher_dot_全蚀斩__, % $cd.技能施放判断间隔
  return true
}

__$watcher_dot_全蚀斩__() {
  clearWatcher("全蚀斩")
}

__$skill_dot_盾牌猛击__() {
  Send {alt down}{5}{alt up}
}

__$skill_dot_钢铁信念__() {
  Send {alt down}{6}{alt up}
}

__$skill_dot_投盾__() {
  if !($level >= 15) {
    return
  }
  Send {alt down}{7}{alt up}
  return true
}

__$skill_dot_战女神之怒__() {
  if !($level >= 26) {
    return
  }
  if !(A_TickCount - $ts.战女神之怒 > $cd.战女神之怒) {
    return
  }
  if !($step == 2) {
    return
  }
  if !($distance == "near") {
    return
  }
  Send {alt down}{8}{alt up}
  SetTimer __$watcher_dot_战女神之怒__, % $cd.技能施放判断间隔
  return true
}

__$watcher_dot_战女神之怒__() {
  if !(clearWatcher("战女神之怒")) {
    return
  }
  $step := 0
}

__$skill_dot_预警__() {
  Send {alt down}{9}{alt up}
}

__$skill_dot_厄运流转__() {
  Send {alt down}{0}{alt up}
}

__$skill_dot_深奥之灵__() {
  if !($level >= 30) {
    return
  }
  if !(A_TickCount - $ts.深奥之灵 > $cd.深奥之灵) {
    return
  }
  Send {alt down}{-}{alt up}
  SetTimer __$watcher_dot_深奥之灵__, % $cd.技能施放判断间隔
  return true
}

__$watcher_dot_深奥之灵__() {
  clearWatcher("深奥之灵")
}

__$skill_dot_铁壁__() {
  Send {shift down}{1}{shift up}
}

__$skill_dot_下踢__() {
  Send {shift down}{2}{shift up}
}

__$skill_dot_挑衅__() {
  Send {shift down}{3}{shift up}
}

__$skill_dot_插言__() {
  Send {shift down}{4}{shift up}
}

__$skill_dot_血仇__() {
  Send {shift down}{5}{shift up}
}

__$skill_dot_亲疏自行__() {
  Send {shift down}{6}{shift up}
}

__$skill_dot_退避__() {
  Send {shift down}{7}{shift up}
}

__$skill_dot_冲刺__() {
  Send {shift down}{-}{shift up}
}

__$skill_dot_空白信息__() {
  Send {shift down}{=}{shift up}
}

__$skill_dot_索敌__() {
  hasTarget := isTargeting()
  if (hasTarget) {
    return true
  }
  Send {f11}
  hasTarget := isTargeting()
  return hasTarget
}

__$skill_dot_报告__() {
  if !($isReporting) {
    return
  }
  msg := "等级：" . $level . ""
  msg := "" . msg . "`n目标距离：" . $distance . ""
  msg := "" . msg . "`n耗时：" . A_TickCount - $ts.报告 . "ms`n"
  $ts.报告 := A_TickCount
  msg := makeReportMsg(msg, "战逃反应")
  msg := makeReportMsg(msg, "深奥之灵")
  ToolTip % msg, 410, 640
  SetTimer clearTip, Off
  SetTimer clearTip, % 0 - 10000
}

__$skill_dot_能力技__() {
  if !($ap == 0) {
    return
  }
  if !(A_TickCount - $ts.能力技 > $cd.能力技) {
    return
  }
  $ts.能力技 := A_TickCount
  $ap := -2
  SetTimer 施放能力技, % 500
}

施放能力技() {
  if ($ap < 0) {
    $ap := -$ap
    return
  }
  if ($ap == 0) {
    SetTimer 施放能力技, Off
    return
  }
  $ap--
  能力技施放()
}

能力技施放() {
  if (use("战逃反应")) {
    return
  }
  if (use("深奥之灵")) {
    return
  }
  use("空白信息")
}

__$skill_dot_获取状态__() {
  if (A_TickCount - $ts.获取状态 > 10000) {
    use("空白信息")
    use("空白信息")
    use("空白信息")
  }
  $ts.获取状态 := A_TickCount
  $distance := getDistance()
}

attackS() {
  if !($distance == "near") {
    return
  }
  if (use("先锋剑")) {
    use("能力技")
    return
  }
  if (use("暴乱剑")) {
    use("能力技")
    return
  }
  if (use("战女神之怒")) {
    use("能力技")
    return
  }
}

attackM() {
  if (use("全蚀斩")) {
    use("能力技")
    return
  }
}

__$default__() {
  $cd.技能施放判断间隔 := 100
  $cd.技能施放补正 := 1500
  $ts.先锋剑 := 0
  $cd.先锋剑 := 3000
  $skill.先锋剑 := Func("__$skill_dot_先锋剑__")
  $watcher.先锋剑 := Func("__$watcher_dot_先锋剑__")
  $ts.战逃反应 := 0
  $cd.战逃反应 := 60000
  $skill.战逃反应 := Func("__$skill_dot_战逃反应__")
  $watcher.战逃反应 := Func("__$watcher_dot_战逃反应__")
  $ts.暴乱剑 := 0
  $cd.暴乱剑 := 3000
  $skill.暴乱剑 := Func("__$skill_dot_暴乱剑__")
  $watcher.暴乱剑 := Func("__$watcher_dot_暴乱剑__")
  $ts.全蚀斩 := 0
  $cd.全蚀斩 := 2000
  $skill.全蚀斩 := Func("__$skill_dot_全蚀斩__")
  $watcher.全蚀斩 := Func("__$watcher_dot_全蚀斩__")
  $skill.盾牌猛击 := Func("__$skill_dot_盾牌猛击__")
  $skill.钢铁信念 := Func("__$skill_dot_钢铁信念__")
  $skill.投盾 := Func("__$skill_dot_投盾__")
  $ts.战女神之怒 := 0
  $cd.战女神之怒 := 3000
  $skill.战女神之怒 := Func("__$skill_dot_战女神之怒__")
  $watcher.战女神之怒 := Func("__$watcher_dot_战女神之怒__")
  $skill.预警 := Func("__$skill_dot_预警__")
  $skill.厄运流转 := Func("__$skill_dot_厄运流转__")
  $ts.深奥之灵 := 0
  $cd.深奥之灵 := 30000
  $skill.深奥之灵 := Func("__$skill_dot_深奥之灵__")
  $watcher.深奥之灵 := Func("__$watcher_dot_深奥之灵__")
  $skill.铁壁 := Func("__$skill_dot_铁壁__")
  $skill.下踢 := Func("__$skill_dot_下踢__")
  $skill.挑衅 := Func("__$skill_dot_挑衅__")
  $skill.插言 := Func("__$skill_dot_插言__")
  $skill.血仇 := Func("__$skill_dot_血仇__")
  $skill.亲疏自行 := Func("__$skill_dot_亲疏自行__")
  $skill.退避 := Func("__$skill_dot_退避__")
  $skill.冲刺 := Func("__$skill_dot_冲刺__")
  $skill.空白信息 := Func("__$skill_dot_空白信息__")
  $skill.索敌 := Func("__$skill_dot_索敌__")
  $ts.报告 := 0
  $skill.报告 := Func("__$skill_dot_报告__")
  $ts.能力技 := 0
  $cd.能力技 := 1000
  $skill.能力技 := Func("__$skill_dot_能力技__")
  $ts.获取状态 := 0
  $skill.获取状态 := Func("__$skill_dot_获取状态__")
}

; default
__$default__()

; event

f5::
  resetKey()
  resetTs()
  SoundBeep
  setLevel()
return

^f5::
  resetKey()
  SoundBeep
  Reload
return

!f4::
  resetKey()
  SoundBeep
  ExitApp
return

2joy5::
  if !(getGroup() == "both") {
    SetTimer toggleView, Off
    SetTimer toggleView, % 300
    return
  }
  Send {shift down}{tab}{shift up}
return

2joy6::
  if !(getGroup() == "both") {
    return
  }
  Send {tab}
return

2joy12::
  if !(getGroup()) {
    return
  }
  use("冲刺")
return

2joy4::
  if !(getGroup()) {
    return
  }
  SetTimer bindAttack, Off
  SetTimer bindAttack, % 300
  attack()
return

; eof